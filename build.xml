<?xml version="1.0" encoding="UTF-8"?>
<project name="Assignment1" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Ivy Setup -->
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}"/>
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="xjc.package" value="healthprofile.generated" />

	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]"/>
	</target>

	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
	</path>

	<path id="run.path.id">
		<path refid="lib.path.id" />
		<fileset dir="${build.dir}">
			<include name="*.class" />
			<include name="**/*.class" />
			<exclude name="**/*Test*" />
		</fileset>
	</path>
	
	<!-- Tasks -->

	<!-- General project setup targets -->

	<target name="init" depends="install-ivy, resolve">
		<echo message="Init has been called" />
		<mkdir dir="${build.dir}" />
		<echo message="${build.dir} has been created" />
	</target>
	
	<!-- cleans the project, elimitates build and xjc classes along with any generated xml and json data -->
	<target name="clean">
		<echo message="Clean has been called" />
		<delete dir="${build.dir}" />
		<echo message="${build.dir} has been deleted" />
		<delete dir="${src.dir}/${xjc.package}" />
		<echo message="${src.dir}/${xjc.package} has been deleted" />
		<delete file="peopleXPATH.xml" />
		<echo message="peopleXPATH.xml has been deleted" />
		<delete file="peopleJAXB.xml" />
		<echo message="peopleJAXB.xml has been deleted" />
		<delete file="people.json" />
		<echo message="people.json has been deleted" />
	</target>
	
	<!-- generates JAXB XJC classes from given people.xsd schema -->
	<target name="generate" depends="init">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="lib.path.id">
		</taskdef>
		<xjc schema="people.xsd" destdir="${src.dir}" package="${xjc.package}" />
	</target>
	
	<!-- compiles the project -->
	<target name="compile" depends="init, generate">
		<echo message="Compile target has been called" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
		</javac>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="*.xml" />
			</fileset>
		</copy>
	</target>
	
	<!-- Application operation targets: except for execute.evaluation it is assumed compile was run beforehand in order to run properly-->

	<!-- generates people.xml containing n=20 randomly generated "Person"s -->
	<target name="execute.PeopleGenerator">
		<echo message="Executing XML People Generator: will produce a peopleXPATH.xml in home folder" />
		<java classname="generator.XMLPeopleGen" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value= "20"/>
		</java>
	</target>	
	
	<!-- prints people information from peopleXPATH.xml using XPATH -->
	<!-- it depends on execute.PeopleGenerator because peopleXPATH.xml must exist in order to run properly -->
	<target name="execute.PrintPeople" depends= "execute.PeopleGenerator">
		<echo message="Printing information of people in the peopleXPATH.xml file" />
		<java classname="assignment.HealthProfileXPATH" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value= "1"/>
		</java>
	</target>	
		
	<!-- prints people information from peopleXPATH.xml using XPATH -->
	<!-- it depends on execute.PeopleGenerator because peopleXPATH.xml must exist in order to run properly -->
	<target name="execute.PrintHP" depends= "execute.PeopleGenerator">
		<echo message="Printing HealthProfile information of person with id = 5 if present in the peopleXPATH.xml file" />
		<java classname="assignment.HealthProfileXPATH" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value= "2"/>
			<arg value= "5"/>
		</java>
	</target>	
	
	<!-- prints people information from peopleXPATH.xml using XPATH takes as input the weight and a condition (>, < , =) -->
	<!-- it depends on execute.PeopleGenerator because peopleXPATH.xml must exist in order to run properly -->
	<target name="execute.PrintByWeight" depends= "execute.PeopleGenerator">
		<echo message="Printing people information from peopleXPATH.xml file having weight > than 90" />
		<java classname="assignment.HealthProfileXPATH" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value= "3"/>
			<arg value= "90"/>
			<arg value= ">" />
		</java>
	</target>

	<!-- prints the weight from peopleXPATH.xml using XPATH -->
	<!-- it depends on execute.PeopleGenerator because peopleXPATH.xml must exist in order to run properly -->
	<target name="execute.GetWeight" depends= "execute.PeopleGenerator">
		<echo message="Getting and printing weight of person with id = 5 if present in the peopleXPATH.xml file" />
		<java classname="assignment.HealthProfileXPATH" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value= "4"/>
			<arg value= "5"/>
		</java>
	</target>	
	
	<!-- prints the height from peopleXPATH.xml using XPATH -->
	<!-- it depends on execute.PeopleGenerator because peopleXPATH.xml must exist in order to run properly -->
	<target name="execute.GetHeight" depends= "execute.PeopleGenerator">
		<echo message="Getting and printing height of person with id = 5 if present in the peopleXPATH.xml file" />
		<java classname="assignment.HealthProfileXPATH" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value= "5"/>
			<arg value= "5"/>
		</java>
	</target>	
	
	<!-- generates 3 people using XJC classes and marshalls to file in XML format -->
	<target name="execute.HPWriter">
		<echo message="Executing Health Profile Writer: will produce a peopleJAXB.xml in home folder" />
		<java classname="assignment.HealthProfileWriter" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- unmarshalls XML file generated by previous example -->
	<target name="execute.HPReader">
		<echo message="Executing Health Profile Reader: will read the peopleJAXB.xml in home folder and print one at a time" />
		<java classname="assignment.HealthProfileReader" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- generates 3 people using XJC classes and marshalls to file in JSON format -->
	<target name="execute.HPJson">
		<echo message="Executing Health Profile Writer for Json: will create people.json in home folder and print" />
		<java classname="assignment.HealthProfileJson" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>	
	
	<!-- runs the targets in order as requested by the assignment -->
	<target name="execute.evaluation" depends="clean, compile, execute.PrintPeople, execute.PrintHP, execute.PrintByWeight, execute.HPWriter, execute.HPReader, execute.HPJson">
		<echo message="Evaluation has been executed" />
	</target>
</project>
